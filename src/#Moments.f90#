!--Intensity moments (0,2,3) and PSF moment(4) written and tested 13th Sept. Follow method set out in Rhodes, Refregier, Groth '10, Apj 536, equations 4 and 51--!
!-Author: cajd@roe.ac.uk-!
!-Apologies for terrible commenting-!

module Moments
  !-Subroutines used in the implemnetation of the RRG method-!
  !--All reals are in DOUBLE (8) PRECISION
  implicit none


  !--Overload the Weighted_Intensity routines - Choice of routien is then set automatically by the rank of the array that is entered. eg is I = scalar (real) then calling Weighted_Intensity_Moment automatically calls Weighted_Intensity_Moment_0, I = I(:,:) then Weighted_Intensity_Moment_2 etc. _2 and _3
  INTERFACE Weighted_Intensity_Moment
     module procedure Weighted_Intensity_Moment_0, Weighted_Intensity_Moment_2, Weighted_Intensity_Moment_3, Weighted_Intensity_Moment_4
  END INTERFACE Weighted_Intensity_Moment

  contains

    !------PSF CORRECTIONS-------!

    subroutine PSF_Moment_4(PSF, Grid_1, Grid_2, Centre, Moment)
      !-PSF entered must be normalised and centred such that d^2theta theta p(theta) = 0, the value for centre must be entered as a 2-element array, and should be in the same units as grid_1 and grid_2-!
      !--Grid 1 and Grid 2 define the grid points of the PSF--!
      !--Equation (50)--!
      real(8), intent(in)::PSF(:,:), Grid_1(:), Grid_2(:)
      real(8), intent(in)::Centre(:)
      real(8), intent(out)::Moment(2,2,2,2)

      integer::i,j,k,l, pix_loop_1, pix_loop_2

      real(8),allocatable::Combined_Grid(:,:)
      integer::Grid_pix(2)
      real(8)::dGrid_1(size(Grid_1)), dGrid_2(size(Grid_2))

      if(size(Grid_1) /= size(PSF,1)) STOP 'PSF_Moment_4 - FATAL ERROR - PSF and Grid (1st dimension) entered are not the same size'
      if(size(Grid_2) /= size(PSF,2)) STOP 'PSF_Moment_4 - FATAL ERROR - PSF and Grid (2nd dimension) entered are not the same size'
      if(size(Centre) /= 2) STOP 'PSF_Moment_4 - FATAL ERROR - Centre is not of the correct size (only 2 co-ord should be specified'

      Moment = 0.e0_8

      allocate(Combined_Grid(2,maxval((/size(Grid_1), size(Grid_2)/)))); Combined_Grid = 0.e0_8
      Combined_Grid(1,1:size(Grid_1)) = Grid_1; Combined_Grid(2,1:size(Grid_2)) = Grid_2 

      !-Calculate dgrid's used in evaluating each pixels contribution to the integral
      dGrid_1(1) = Grid_1(2)-Grid_1(1); dGrid_2(1) = Grid_2(2)-Grid_2(1)
      dGrid_1(size(dGrid_1)) =  Grid_1(size(Grid_1)) - Grid_1(size(Grid_1)-1); dGrid_2(size(dGrid_2)) =  Grid_2(size(Grid_2)) - Grid_2(size(Grid_2)-1)
      do i = 2, size(Grid_1)-1
         dGrid_1(i) = 0.5e0_8*(Grid_1(i+1)-Grid_1(i-1))
      end do
      do i = 2, size(Grid_2)-1
         dGrid_2(i) = 0.5e0_8*(Grid_2(i+1)-Grid_2(i-1))
      end do

      do i = 1, 2
         do j = 1, 2
            do k = 1, 2
               do l = 1, 2
                  do pix_loop_1 = 1, size(Grid_1)
                     do pix_loop_2 = 1, size(Grid_2)
                        Grid_Pix = (/pix_loop_1, pix_loop_2/)
                        Moment(i,j,k,l) = Moment(i,j,k,l) + dGrid_1(pix_loop_1)*dGrid_2(pix_loop_2)*(Combined_Grid(i,Grid_Pix(i))-Centre(i))*(Combined_Grid(j,Grid_Pix(j))-Centre(j))*(Combined_Grid(k,Grid_Pix(k))-Centre(k))*(Combined_Grid(l,Grid_Pix(l))-Centre(l))*PSF(pix_loop_1, pix_loop_2)
                     end do
                  end do
               end do
            end do
         end do
      end do

      deallocate(Combined_Grid)

    end subroutine PSF_Moment_4

    !---INTENSITY MOMENT ROUTINES-----------------------------------------------------------------------------------------------------------------!
    !-NOTE: CENTROID_POSITION should be the mean of the inensity map in both directions.
    !------- Weighted_intensity_moments routines have been overloaded, so that a call to Weighted_Intensity_Moment with the correct dimension of result array (I) will return the correct answer-----!
    !-Normalisation should be the zeroth order moment - If the normalised Moments are not desired, then Normalisation = 1 should be used

    subroutine Weighted_Intensity_Moment_0(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, I)
      !-Returns I in equation 4 of RRG-!
      !-Grid defines the grid over which the intensity map is defined. Guass_Width should be an initial estiamte of source size (RRG) 
      real(8),intent(in)::Intensity_Map(:,:), Grid_1(:), Grid_2(:)
      real(8), intent(in)::Centroid_Position(:)
      real(8),intent(in)::Gauss_Width

      real(8),intent(out)::I

      !--Internal Declarations--!
      integer::pix_1,pix_2
      real(8),allocatable::Integrand(:,:)
      real(8)::dGrid_1(size(Grid_1)), dGrid_2(size(Grid_2))

      print *, 'Computing 0th order Intensity moment...'

      if(size(Grid_1) /= size(Intensity_Map,1)) STOP 'Weighted_Intensity_Moment_0 - FATAL ERROR - Intensity_Map and Grid (1st dimension) are not of the same size'
      if(size(Grid_2) /= size(Intensity_Map,2)) STOP 'Weighted_Intensity_Moment_0 - FATAL ERROR - Intensity_Map and Grid (2nd dimension) are not of the same size'            

      call Weighted_Intensity(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, Integrand)

      if(all(Integrand == 0.e0_8)) STOP 'Weighted_Intensity_Moment_0 - FATAL ERROR - Integrand is empty'

      !-Set up grid of dGrid for both dimensions. Used in evaluating the integral (taken as retangular integration in two dimensions)
      dGrid_1(1) = Grid_1(2)-Grid_1(1); dGrid_2(1) = Grid_2(2)-Grid_2(1)
      dGrid_1(size(dGrid_1)) =  Grid_1(size(Grid_1)) - Grid_1(size(Grid_1)-1); dGrid_2(size(dGrid_2)) =  Grid_2(size(Grid_2)) - Grid_2(size(Grid_2)-1)
      do pix_1 = 2, size(Grid_1)-1
         dGrid_1(pix_1) = 0.5e0_8*(Grid_1(pix_1+1)-Grid_1(pix_1-1))
      end do
      do pix_1 = 2, size(Grid_2)-1
         dGrid_2(pix_1) = 0.5e0_8*(Grid_2(pix_1+1)-Grid_2(pix_1-1))
      end do


      !-Carry out the integration by addition of cells-!
      do pix_1 = 1, size(Integrand,1)
         do pix_2 = 1, size(Integrand,2)
            I = I + (dGrid_1(pix_1)*dGrid_2(pix_2))*Integrand(pix_1, pix_2)
         end do
      end do

      deallocate(Integrand)

      print *, 'Done.'

    end subroutine Weighted_Intensity_Moment_0

    subroutine Weighted_Intensity_Moment_2(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, IM, Normalisation)
      !-Returns I_ij in equation 4 of RRG-!
      !-Grid defines the grid over which the intensity map is defined. Centroid_Position
      real(8),intent(in)::Intensity_Map(:,:), Grid_1(:), Grid_2(:)
      real(8), intent(in)::Centroid_Position(:)
      real(8),intent(in)::Gauss_Width
      real(8), optional::Normalisation

      real(8),intent(out)::IM(2,2)

      !---!
      integer::i,j,k,l, pix_loop_1, pix_loop_2

      real(8),allocatable::Integrand(:,:)
      real(8),allocatable::Combined_Grid(:,:)
      integer::Grid_pix(2)
      real(8)::dGrid_1(size(Grid_1)), dGrid_2(size(Grid_2))

      INTERFACE
         subroutine Weighted_Intensity_Moment_2(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, IM, Normalisation)
           real(8),intent(in)::Intensity_Map(:,:), Grid_1(:), Grid_2(:)
           real(8), intent(in)::Centroid_Position(:)
           real(8),intent(in)::Gauss_Width
           real(8), optional::Normalisation
           
           real(8),intent(out)::IM(2,2)
         END subroutine Weighted_Intensity_Moment_2
      END INTERFACE

      allocate(Combined_Grid(2,maxval((/size(Grid_1), size(Grid_2)/)))); Combined_Grid = 0.e0_8
      Combined_Grid(1,1:size(Grid_1)) = Grid_1; Combined_Grid(2,1:size(Grid_2)) = Grid_2 

      dGrid_1(1) = Grid_1(2)-Grid_1(1); dGrid_2(1) = Grid_2(2)-Grid_2(1)
      dGrid_1(size(dGrid_1)) =  Grid_1(size(Grid_1)) - Grid_1(size(Grid_1)-1); dGrid_2(size(dGrid_2)) =  Grid_2(size(Grid_2)) - Grid_2(size(Grid_2)-1)
      do i = 2, size(Grid_1)-1
         dGrid_1(i) = 0.5e0_8*(Grid_1(i+1)-Grid_1(i-1))
      end do
      do i = 2, size(Grid_2)-1
         dGrid_2(i) = 0.5e0_8*(Grid_2(i+1)-Grid_2(i-1))
      end do

      IM = 0.e0_8

      call Weighted_Intensity(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, Integrand) 

      do i = 1, 2
         do j = 1, 2
                  do pix_loop_1 = 1, size(Grid_1)
                     do pix_loop_2 = 1, size(Grid_2)
                        Grid_Pix = (/pix_loop_1, pix_loop_2/)
                        IM(i,j) = IM(i,j) + dGrid_1(pix_loop_1)*dGrid_2(pix_loop_2)*(Combined_Grid(i,Grid_Pix(i))-Centroid_position(i))*(Combined_Grid(j,Grid_Pix(j))-Centroid_position(j))*Integrand(pix_loop_1, pix_loop_2)
                     end do
                  end do
         end do
      end do
      if(present(Normalisation)) IM = IM/Normalisation 

      deallocate(Combined_Grid, Integrand)

      print *, 'Done.'

    end subroutine Weighted_Intensity_Moment_2

    subroutine Weighted_Intensity_Moment_3(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, IM, Normalisation)
      !-Returns I_ijk in equation 4 of RRG-!
      !-Grid defines the grid over which the intensity map is defined. Centroid_Position defines the mean of the intensity map in both directions, and MUST be specified.
      real(8),intent(in)::Intensity_Map(:,:), Grid_1(:), Grid_2(:)
      real(8), intent(in)::Centroid_Position(:)
      real(8),intent(in)::Gauss_Width
      real(8),optional::Normalisation

      real(8),intent(out)::IM(2,2,2)

      !---!
      integer::i,j,k,l, pix_loop_1, pix_loop_2

      real(8),allocatable::Integrand(:,:)
      real(8),allocatable::Combined_Grid(:,:)
      integer::Grid_pix(2)
      real(8)::dGrid_1(size(Grid_1)), dGrid_2(size(Grid_2))

      INTERFACE
         subroutine Weighted_Intensity_Moment_3(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, IM, Normalisation)
           real(8),intent(in)::Intensity_Map(:,:), Grid_1(:), Grid_2(:)
           real(8), intent(in)::Centroid_Position(:)
           real(8),intent(in)::Gauss_Width
           real(8),optional::Normalisation
           
           real(8),intent(out)::IM(2,2,2)
         end subroutine Weighted_Intensity_Moment_3
      END INTERFACE

      allocate(Combined_Grid(2,maxval((/size(Grid_1), size(Grid_2)/)))); Combined_Grid = 0.e0_8
      Combined_Grid(1,1:size(Grid_1)) = Grid_1; Combined_Grid(2,1:size(Grid_2)) = Grid_2 

      dGrid_1(1) = Grid_1(2)-Grid_1(1); dGrid_2(1) = Grid_2(2)-Grid_2(1)
      dGrid_1(size(dGrid_1)) =  Grid_1(size(Grid_1)) - Grid_1(size(Grid_1)-1); dGrid_2(size(dGrid_2)) =  Grid_2(size(Grid_2)) - Grid_2(size(Grid_2)-1)
      do i = 2, size(Grid_1)-1
         dGrid_1(i) = 0.5e0_8*(Grid_1(i+1)-Grid_1(i-1))
      end do
      do i = 2, size(Grid_2)-1
         dGrid_2(i) = 0.5e0_8*(Grid_2(i+1)-Grid_2(i-1))
      end do

      IM = 0.e0_8

      call Weighted_Intensity(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, Integrand) 

      do i = 1, 2
         do j = 1, 2
            do k = 1, 2
                  do pix_loop_1 = 1, size(Grid_1)
                     do pix_loop_2 = 1, size(Grid_2)
                        Grid_Pix = (/pix_loop_1, pix_loop_2/)
                        IM(i,j,k) = IM(i,j,k) + dGrid_1(pix_loop_1)*dGrid_2(pix_loop_2)*(Combined_Grid(i,Grid_Pix(i))-Centroid_position(i))*(Combined_Grid(j,Grid_Pix(j))-Centroid_position(j))*(Combined_Grid(k,Grid_Pix(k))-Centroid_position(k))*Integrand(pix_loop_1, pix_loop_2)
                     end do
                  end do
            end do
         end do
      end do
      IM = IM/Normalisation 

      deallocate(Combined_Grid, Integrand)

      print *, 'Done.'

    end subroutine Weighted_Intensity_Moment_3


    subroutine Weighted_Intensity_Moment_4(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, IM, Normalisation)
      !-Returns I_ijk in equation 4 of RRG-!
      !-Grid defines the grid over which the intensity map is defined. Centroid_Position defines the mean of the intensity map in both directions, and MUST be specified.
      real(8),intent(in)::Intensity_Map(:,:), Grid_1(:), Grid_2(:)
      real(8), intent(in)::Centroid_Position(:)
      real(8),intent(in)::Gauss_Width
      real(8),optional::Normalisation

      real(8),intent(out)::IM(2,2,2,2)

      !---!
      integer::i,j,k,l, pix_loop_1, pix_loop_2

      real(8),allocatable::Integrand(:,:)
      real(8),allocatable::Combined_Grid(:,:)
      integer::Grid_pix(2)
      real(8)::dGrid_1(size(Grid_1)), dGrid_2(size(Grid_2))

      INTERFACE
         subroutine Weighted_Intensity_Moment_4(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, IM, Normalisation)
           real(8),intent(in)::Intensity_Map(:,:), Grid_1(:), Grid_2(:)
           real(8), intent(in)::Centroid_Position(:)
           real(8),intent(in)::Gauss_Width
           real(8),optional::Normalisation
           
           real(8),intent(out)::IM(2,2,2,2)
         end subroutine Weighted_Intensity_Moment_4
      END INTERFACE

      allocate(Combined_Grid(2,maxval((/size(Grid_1), size(Grid_2)/)))); Combined_Grid = 0.e0_8
      Combined_Grid(1,1:size(Grid_1)) = Grid_1; Combined_Grid(2,1:size(Grid_2)) = Grid_2 

      dGrid_1(1) = Grid_1(2)-Grid_1(1); dGrid_2(1) = Grid_2(2)-Grid_2(1)
      dGrid_1(size(dGrid_1)) =  Grid_1(size(Grid_1)) - Grid_1(size(Grid_1)-1); dGrid_2(size(dGrid_2)) =  Grid_2(size(Grid_2)) - Grid_2(size(Grid_2)-1)
      do i = 2, size(Grid_1)-1
         dGrid_1(i) = 0.5e0_8*(Grid_1(i+1)-Grid_1(i-1))
      end do
      do i = 2, size(Grid_2)-1
         dGrid_2(i) = 0.5e0_8*(Grid_2(i+1)-Grid_2(i-1))
      end do

      IM = 0.e0_8

      call Weighted_Intensity(Intensity_Map, Grid_1, Grid_2, Centroid_Position, Gauss_Width, Integrand) 

      do i = 1, 2
         do j = 1, 2
            do k = 1, 2
               do l = 1, 2
                  do pix_loop_1 = 1, size(Grid_1)
                     do pix_loop_2 = 1, size(Grid_2)
                        Grid_Pix = (/pix_loop_1, pix_loop_2/)
                        IM(i,j,k,l) = IM(i,j,k,l) + dGrid_1(pix_loop_1)*dGrid_2(pix_loop_2)*(Combined_Grid(i,Grid_Pix(i))-Centroid_position(i))*(Combined_Grid(j,Grid_Pix(j))-Centroid_position(j))*(Combined_Grid(k,Grid_Pix(k))-Centroid_position(k))*(Combined_Grid(l,Grid_Pix(l))-Centroid_position(l))*Integrand(pix_loop_1, pix_loop_2)
                     end do
                  end do
               end do
            end do
         end do
      end do
      IM = IM/Normalisation 

      deallocate(Combined_Grid, Integrand)

      print *, 'Done.'

    end subroutine Weighted_Intensity_Moment_4


    subroutine Weighted_Intensity(Intensity, Grid_1, Grid_2, Centroid_Position, Gauss_Weight_Width, Res)
      !-Returns w(\theta)i(\theta), used in the integrands of the weighted intensity moments defined in equation (4) of RRG. Integrates to a truncation angle of ~Truncation_Angle_byWidth*Gauss_Weight_Width.-!
      !--Evaluating only the function within a number of Gaussian Widths of the centroid is avoidable provided the images only contains the galaxy for whose features we are measuring. This method allows the image to be as large as necessary-!
      real(8),intent(in)::Intensity(:,:) !-Theta_1, Theta_2-!
      real(8), intent(in)::Grid_1(:), Grid_2(:)
      real(8),intent(in)::Centroid_Position(:)
      real(8),intent(in)::Gauss_Weight_Width

      real(8),intent(out),allocatable::Res(:,:)

      !--Internal Declarations--!
      integer::Truncation_Angle_byWidth = 10 !-Sets the number of gaussian widths to which the function is evaluated-!
      integer::theta_1,theta_2, i
      real(8)::truncation_angle_1, truncation_angle_2
      integer::Centroid_Position_Index(2)

      if(size(Grid_1) /= size(Intensity,1)) STOP 'Weighted_Intensity - FATAL ERROR - Grid and Intensoity are not conformal'
      if(size(Grid_2) /= size(Intensity,2)) STOP 'Weighted_Intensity - FATAL ERROR - Grid and Intensoity are not conformal'

      !-Find Controid Position index's-!
      if(Centroid_Position(1) < Grid_1(1)) STOP 'Weighted_Intesity_Moment_1 - FATAL ERROR - Centroid Position 1 is too small'
      if(Centroid_Position(1) > Grid_1(size(Grid_1))) STOP 'Weighted_Intesity_Moment_1 - FATAL ERROR - Centroid Position 1 is too large'
      if(Centroid_Position(2) <Grid_2(1)) STOP 'Weighted_Intesity_Moment_1 - FATAL ERROR - Centroid Position 2 is too small'
      if(Centroid_Position(2) > Grid_2(size(Grid_2))) STOP 'Weighted_Intesity_Moment_1 - FATAL ERROR - Centroid Position 2 is too large'
      !If positioned at max grid points, then this is not counted, however this shouldn't happen in practice!
      do i = 1, maxval((/size(Grid_1)-1, size(Grid_2)-1/))
         if( (i<=size(Grid_1)-1) .and. (Centroid_Position(1) >= Grid_1(i)) .and. (Centroid_Position(1) < Grid_1(i+1)) ) Centroid_Position_Index(1) = i
         if( (i<=size(Grid_2)-1) .and. (Centroid_Position(2) >= Grid_2(i)) .and. (Centroid_Position(2) < Grid_2(i+1)) ) Centroid_Position_Index(2) = i
      end do      

      truncation_angle_1 = Truncation_Angle_byWidth*Gauss_Weight_Width/(Grid_1(2)-Grid_1(1)); truncation_angle_2 = Truncation_Angle_byWidth*Gauss_Weight_Width/(Grid_2(2)-Grid_2(1))

      if(allocated(Res)) deallocate(Res)
      allocate(Res(size(Intensity,1), size(Intensity,2))); Res  = 0.e0_8
      !--Set w(theta)i(theta) = 0 outside truncation angle, only set a value within truncation angle. NOTE: all values here are set on a pixel scale, therefore Guass_Weight_Width MUST be in units of pixels--!
      do theta_1 = maxval((/Centroid_Position_Index(1) -int(truncation_angle_1+1),0/)), minval( (/ size(Intensity,1), Centroid_Position_Index(1) + int(Truncation_Angle_1+1)/))
         do theta_2 = maxval((/0,Centroid_Position_Index(2) - int(Truncation_Angle_2+1)/)), minval((/size(Intensity,2),Centroid_Position_Index(2) + int(Truncation_Angle_2+1)/))
            Res(theta_1, theta_2) = ( 1.e0_8/(6.28319e0_8*Gauss_Weight_Width*Gauss_Weight_Width) )*dexp( -1.e0_8*((Grid_1(theta_1)-Centroid_Position(1))**2.e0_8 + (Grid_2(theta_2)-Centroid_Position(2))**2.e0_8)/(2.e0_8*Gauss_Weight_Width*Gauss_Weight_Width) )*Intensity(theta_1, theta_2)
         end do
      end do

      if(all(Res == 0.e0_8)) STOP 'Weighted_Intensity - Result is empty'

    end subroutine Weighted_Intensity

end module Moments


!----------- MODULE TESTS ---------!
!---INTENSITY MOMENT ROUTINES---!
!- Tested for convergence with choice of sigma, and truncation angle. Value tested for i(theta) = constant, 2_Guass_widht**2 = 1., in which case I = constant, I_ij = constant/2 i=j; 0 otherwise, and I_ijk = 0. All recreated to 10^-18. Method of Grid_Pix etc tested agaisnt explicit I(1,1,1) etc where grid is specified, with exact agreement-!
